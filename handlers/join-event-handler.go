package handlers

import (
	"RideUP/sessions"
	"RideUP/utils"
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
)

func JoinEventHandler(w http.ResponseWriter, r *http.Request) {
	log.Println(">>> JoinEventHandler appel√©")

	if r.Method != http.MethodPost {
		http.Error(w, "M√©thode non autoris√©e", http.StatusMethodNotAllowed)
		return
	}

	session, err := sessions.GetSessionFromRequest(r)
	if err != nil {
		log.Println("‚ùå Utilisateur non connect√©")
		http.Error(w, "Non connect√©", http.StatusUnauthorized)
		return
	}

	if err := r.ParseForm(); err != nil {
		log.Printf("‚ùå Erreur ParseForm: %v", err)
		http.Error(w, "Donn√©es invalides", http.StatusBadRequest)
		return
	}

	eventID := r.FormValue("event_id")
	action := r.FormValue("action")

	log.Printf("üìù EventID: %s, Action: %s, UserID: %d", eventID, action, session.UserID)

	if eventID == "" || (action != "join" && action != "leave") {
		log.Println("‚ùå Param√®tres invalides")
		http.Error(w, "Param√®tres invalides", http.StatusBadRequest)
		return
	}

	db, err := sql.Open("sqlite3", "./data/RideUp.db")
	if err != nil {
		log.Printf("‚ùå Erreur ouverture DB: %v", err)
		utils.InternalServError(w)
		return
	}
	defer db.Close()

	var participants int64
	var joined bool

	if action == "join" {
		// V√©rifier si d√©j√† inscrit
		var count int
		err = db.QueryRow(`SELECT COUNT(*) FROM event_participants WHERE user_id = ? AND event_id = ?`,
			session.UserID, eventID).Scan(&count)
		if err != nil {
			log.Printf("‚ùå Erreur v√©rification inscription: %v", err)
			http.Error(w, "Erreur base de donn√©es", http.StatusInternalServerError)
			return
		}

		if count == 0 {
			// Inscrire l'utilisateur
			_, err = db.Exec(`INSERT INTO event_participants (user_id, event_id) VALUES (?, ?)`,
				session.UserID, eventID)
			if err != nil {
				log.Printf("‚ùå Erreur insertion participant: %v", err)
				http.Error(w, "Erreur insertion", http.StatusInternalServerError)
				return
			}

			// Incr√©menter le compteur
			_, err = db.Exec(`UPDATE events SET participants = COALESCE(participants, 0) + 1 WHERE id = ?`, eventID)
			if err != nil {
				log.Printf("‚ö†Ô∏è Erreur mise √† jour compteur: %v", err)
			}

			joined = true
			log.Printf("‚úÖ Utilisateur %d inscrit √† l'√©v√©nement %s", session.UserID, eventID)
		} else {
			joined = true // D√©j√† inscrit
			log.Printf("‚ÑπÔ∏è Utilisateur %d d√©j√† inscrit √† l'√©v√©nement %s", session.UserID, eventID)
		}

	} else if action == "leave" {
		// D√©sinscrire l'utilisateur
		result, err := db.Exec(`DELETE FROM event_participants WHERE user_id = ? AND event_id = ?`,
			session.UserID, eventID)
		if err != nil {
			log.Printf("‚ùå Erreur suppression participant: %v", err)
			http.Error(w, "Erreur suppression", http.StatusInternalServerError)
			return
		}

		// V√©rifier si une ligne a √©t√© supprim√©e
		rowsAffected, _ := result.RowsAffected()
		if rowsAffected > 0 {
			// D√©cr√©menter le compteur
			_, err = db.Exec(`UPDATE events SET participants = MAX(0, COALESCE(participants, 0) - 1) WHERE id = ?`, eventID)
			if err != nil {
				log.Printf("‚ö†Ô∏è Erreur mise √† jour compteur: %v", err)
			}
			log.Printf("‚úÖ Utilisateur %d d√©sinscrit de l'√©v√©nement %s", session.UserID, eventID)
		}

		joined = false
	}

	// R√©cup√©rer le nombre de participants
	err = db.QueryRow(`SELECT COALESCE(participants, 0) FROM events WHERE id = ?`, eventID).Scan(&participants)
	if err != nil {
		log.Printf("‚ö†Ô∏è Erreur r√©cup√©ration participants: %v", err)
		participants = 0
	}

	response := map[string]interface{}{
		"joined":       joined,
		"participants": participants,
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå Erreur encodage JSON: %v", err)
	}

	log.Printf("‚úÖ R√©ponse envoy√©e: joined=%v, participants=%d", joined, participants)
}
